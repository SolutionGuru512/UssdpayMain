/*
 * Holdings APIs
 * Get customer holdings
 *
 * OpenAPI spec version: v1.0.2
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.bank.ussd.apiclient.holdings2.model;

import java.util.Objects;
import com.fasterxml.jackson.annotation.JsonProperty;
import io.swagger.annotations.ApiModelProperty;
import java.math.BigDecimal;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.List;

/**
 * HoldingsResponseBodyInnerProducts
 */

public class HoldingsResponseBodyInnerProducts {
  @JsonProperty("productLineName")
  private String productLineName = null;

  @JsonProperty("arrangementId")
  private String arrangementId = null;

  @JsonProperty("productGroupId")
  private String productGroupId = null;

  @JsonProperty("productGroupName")
  private String productGroupName = null;

  @JsonProperty("productId")
  private String productId = null;

  @JsonProperty("productDescription")
  private String productDescription = null;

  @JsonProperty("accountId")
  private String accountId = null;

  @JsonProperty("shortTitle")
  private String shortTitle = null;

  @JsonProperty("categoryId")
  private String categoryId = null;

  @JsonProperty("companyCode")
  private String companyCode = null;

  @JsonProperty("currencyId")
  private String currencyId = null;

  @JsonProperty("sortCode")
  private String sortCode = null;

  @JsonProperty("accountIBAN")
  private String accountIBAN = null;

  @JsonProperty("workingBalance")
  private BigDecimal workingBalance = null;

  @JsonProperty("openingDate")
  private LocalDate openingDate = null;

  @JsonProperty("companyName")
  private String companyName = null;

  @JsonProperty("preferredProduct")
  private String preferredProduct = null;

  @JsonProperty("preferredProductPosition")
  private String preferredProductPosition = null;

  @JsonProperty("preferredProductLabel")
  private String preferredProductLabel = null;

  @JsonProperty("permission")
  private String permission = null;

  @JsonProperty("onlineActualBalance")
  private BigDecimal onlineActualBalance = null;

  @JsonProperty("availableBalance")
  private BigDecimal availableBalance = null;

  @JsonProperty("outstandingAmount")
  private BigDecimal outstandingAmount = null;

  @JsonProperty("paidOutAmount")
  private BigDecimal paidOutAmount = null;

  @JsonProperty("arrangementStatus")
  private String arrangementStatus = null;

  @JsonProperty("totalPrincipal")
  private BigDecimal totalPrincipal = null;

  @JsonProperty("connectionId")
  private String connectionId = null;

  @JsonProperty("balancesLastUpdated")
  private String balancesLastUpdated = null;

  @JsonProperty("transactionsLastUpdated")
  private String transactionsLastUpdated = null;

  @JsonProperty("bankLogo")
  private String bankLogo = null;

  @JsonProperty("extSourceProvider")
  private String extSourceProvider = null;

  @JsonProperty("customerId")
  private String customerId = null;

  @JsonProperty("connectionStatus")
  private String connectionStatus = null;

  @JsonProperty("connectionSubStatus")
  private String connectionSubStatus = null;

  @JsonProperty("nextRefreshAvailableAt")
  private String nextRefreshAvailableAt = null;

  @JsonProperty("acctSwiftRef")
  private String acctSwiftRef = null;

  @JsonProperty("extAccountNumber")
  private String extAccountNumber = null;

  @JsonProperty("paymentTemplates")
  private List<HoldingsResponseBodyInnerPaymentTemplates> paymentTemplates = null;

  public HoldingsResponseBodyInnerProducts productLineName(String productLineName) {
    this.productLineName = productLineName;
    return this;
  }

   /**
   * \&quot;Description of the product line, e.g. \&quot;\&quot;Client Consent\&quot;\&quot; for product line CONSENT.\&quot;
   * @return productLineName
  **/
  @ApiModelProperty(value = "\"Description of the product line, e.g. \"\"Client Consent\"\" for product line CONSENT.\"")
  public String getProductLineName() {
    return productLineName;
  }

  public void setProductLineName(String productLineName) {
    this.productLineName = productLineName;
  }

  public HoldingsResponseBodyInnerProducts arrangementId(String arrangementId) {
    this.arrangementId = arrangementId;
    return this;
  }

   /**
   * The identifier of the arrangement
   * @return arrangementId
  **/
  @ApiModelProperty(value = "The identifier of the arrangement")
  public String getArrangementId() {
    return arrangementId;
  }

  public void setArrangementId(String arrangementId) {
    this.arrangementId = arrangementId;
  }

  public HoldingsResponseBodyInnerProducts productGroupId(String productGroupId) {
    this.productGroupId = productGroupId;
    return this;
  }

   /**
   * The group, as defined by the institution, that the product belongs to.
   * @return productGroupId
  **/
  @ApiModelProperty(value = "The group, as defined by the institution, that the product belongs to.")
  public String getProductGroupId() {
    return productGroupId;
  }

  public void setProductGroupId(String productGroupId) {
    this.productGroupId = productGroupId;
  }

  public HoldingsResponseBodyInnerProducts productGroupName(String productGroupName) {
    this.productGroupName = productGroupName;
    return this;
  }

   /**
   * Description of the product group
   * @return productGroupName
  **/
  @ApiModelProperty(value = "Description of the product group")
  public String getProductGroupName() {
    return productGroupName;
  }

  public void setProductGroupName(String productGroupName) {
    this.productGroupName = productGroupName;
  }

  public HoldingsResponseBodyInnerProducts productId(String productId) {
    this.productId = productId;
    return this;
  }

   /**
   * Id of the product.
   * @return productId
  **/
  @ApiModelProperty(value = "Id of the product.")
  public String getProductId() {
    return productId;
  }

  public void setProductId(String productId) {
    this.productId = productId;
  }

  public HoldingsResponseBodyInnerProducts productDescription(String productDescription) {
    this.productDescription = productDescription;
    return this;
  }

   /**
   * Description of the product
   * @return productDescription
  **/
  @ApiModelProperty(value = "Description of the product")
  public String getProductDescription() {
    return productDescription;
  }

  public void setProductDescription(String productDescription) {
    this.productDescription = productDescription;
  }

  public HoldingsResponseBodyInnerProducts accountId(String accountId) {
    this.accountId = accountId;
    return this;
  }

   /**
   * The identifier of the account. Often referred to as the account number, yet for consistency this is always referred to as accountId.
   * @return accountId
  **/
  @ApiModelProperty(value = "The identifier of the account. Often referred to as the account number, yet for consistency this is always referred to as accountId.")
  public String getAccountId() {
    return accountId;
  }

  public void setAccountId(String accountId) {
    this.accountId = accountId;
  }

  public HoldingsResponseBodyInnerProducts shortTitle(String shortTitle) {
    this.shortTitle = shortTitle;
    return this;
  }

   /**
   * 
   * @return shortTitle
  **/
  @ApiModelProperty(value = "")
  public String getShortTitle() {
    return shortTitle;
  }

  public void setShortTitle(String shortTitle) {
    this.shortTitle = shortTitle;
  }

  public HoldingsResponseBodyInnerProducts categoryId(String categoryId) {
    this.categoryId = categoryId;
    return this;
  }

   /**
   * Identifier of the product category
   * @return categoryId
  **/
  @ApiModelProperty(value = "Identifier of the product category")
  public String getCategoryId() {
    return categoryId;
  }

  public void setCategoryId(String categoryId) {
    this.categoryId = categoryId;
  }

  public HoldingsResponseBodyInnerProducts companyCode(String companyCode) {
    this.companyCode = companyCode;
    return this;
  }

   /**
   * Company code in audit details
   * @return companyCode
  **/
  @ApiModelProperty(value = "Company code in audit details")
  public String getCompanyCode() {
    return companyCode;
  }

  public void setCompanyCode(String companyCode) {
    this.companyCode = companyCode;
  }

  public HoldingsResponseBodyInnerProducts currencyId(String currencyId) {
    this.currencyId = currencyId;
    return this;
  }

   /**
   * Identifier of the currency. This is the 3-letter ISO 4217 code of the currency.
   * @return currencyId
  **/
  @ApiModelProperty(value = "Identifier of the currency. This is the 3-letter ISO 4217 code of the currency.")
  public String getCurrencyId() {
    return currencyId;
  }

  public void setCurrencyId(String currencyId) {
    this.currencyId = currencyId;
  }

  public HoldingsResponseBodyInnerProducts sortCode(String sortCode) {
    this.sortCode = sortCode;
    return this;
  }

   /**
   * The bank identifier code which identifies both the bank and the branch where the account is held.
   * @return sortCode
  **/
  @ApiModelProperty(value = "The bank identifier code which identifies both the bank and the branch where the account is held.")
  public String getSortCode() {
    return sortCode;
  }

  public void setSortCode(String sortCode) {
    this.sortCode = sortCode;
  }

  public HoldingsResponseBodyInnerProducts accountIBAN(String accountIBAN) {
    this.accountIBAN = accountIBAN;
    return this;
  }

   /**
   * Represents the International Bank Account Number (IBAN)
   * @return accountIBAN
  **/
  @ApiModelProperty(value = "Represents the International Bank Account Number (IBAN)")
  public String getAccountIBAN() {
    return accountIBAN;
  }

  public void setAccountIBAN(String accountIBAN) {
    this.accountIBAN = accountIBAN;
  }

  public HoldingsResponseBodyInnerProducts workingBalance(BigDecimal workingBalance) {
    this.workingBalance = workingBalance;
    return this;
  }

   /**
   * Real-time balance including all authorised transactions posted against the account and, unless it is a nostro or internal account, unauthorised debit entries.
   * @return workingBalance
  **/
  @ApiModelProperty(value = "Real-time balance including all authorised transactions posted against the account and, unless it is a nostro or internal account, unauthorised debit entries.")
  public BigDecimal getWorkingBalance() {
    return workingBalance;
  }

  public void setWorkingBalance(BigDecimal workingBalance) {
    this.workingBalance = workingBalance;
  }

  public HoldingsResponseBodyInnerProducts openingDate(LocalDate openingDate) {
    this.openingDate = openingDate;
    return this;
  }

   /**
   * The date the account is opened.
   * @return openingDate
  **/
  @ApiModelProperty(value = "The date the account is opened.")
  public LocalDate getOpeningDate() {
    return openingDate;
  }

  public void setOpeningDate(LocalDate openingDate) {
    this.openingDate = openingDate;
  }

  public HoldingsResponseBodyInnerProducts companyName(String companyName) {
    this.companyName = companyName;
    return this;
  }

   /**
   * The company in which payment is processed
   * @return companyName
  **/
  @ApiModelProperty(value = "The company in which payment is processed")
  public String getCompanyName() {
    return companyName;
  }

  public void setCompanyName(String companyName) {
    this.companyName = companyName;
  }

  public HoldingsResponseBodyInnerProducts preferredProduct(String preferredProduct) {
    this.preferredProduct = preferredProduct;
    return this;
  }

   /**
   * 
   * @return preferredProduct
  **/
  @ApiModelProperty(value = "")
  public String getPreferredProduct() {
    return preferredProduct;
  }

  public void setPreferredProduct(String preferredProduct) {
    this.preferredProduct = preferredProduct;
  }

  public HoldingsResponseBodyInnerProducts preferredProductPosition(String preferredProductPosition) {
    this.preferredProductPosition = preferredProductPosition;
    return this;
  }

   /**
   * 
   * @return preferredProductPosition
  **/
  @ApiModelProperty(value = "")
  public String getPreferredProductPosition() {
    return preferredProductPosition;
  }

  public void setPreferredProductPosition(String preferredProductPosition) {
    this.preferredProductPosition = preferredProductPosition;
  }

  public HoldingsResponseBodyInnerProducts preferredProductLabel(String preferredProductLabel) {
    this.preferredProductLabel = preferredProductLabel;
    return this;
  }

   /**
   * 
   * @return preferredProductLabel
  **/
  @ApiModelProperty(value = "")
  public String getPreferredProductLabel() {
    return preferredProductLabel;
  }

  public void setPreferredProductLabel(String preferredProductLabel) {
    this.preferredProductLabel = preferredProductLabel;
  }

  public HoldingsResponseBodyInnerProducts permission(String permission) {
    this.permission = permission;
    return this;
  }

   /**
   * 
   * @return permission
  **/
  @ApiModelProperty(value = "")
  public String getPermission() {
    return permission;
  }

  public void setPermission(String permission) {
    this.permission = permission;
  }

  public HoldingsResponseBodyInnerProducts onlineActualBalance(BigDecimal onlineActualBalance) {
    this.onlineActualBalance = onlineActualBalance;
    return this;
  }

   /**
   * Real-time balance including all authorised transactions posted against the account, excluding any entries with a future processing date.
   * @return onlineActualBalance
  **/
  @ApiModelProperty(value = "Real-time balance including all authorised transactions posted against the account, excluding any entries with a future processing date.")
  public BigDecimal getOnlineActualBalance() {
    return onlineActualBalance;
  }

  public void setOnlineActualBalance(BigDecimal onlineActualBalance) {
    this.onlineActualBalance = onlineActualBalance;
  }

  public HoldingsResponseBodyInnerProducts availableBalance(BigDecimal availableBalance) {
    this.availableBalance = availableBalance;
    return this;
  }

   /**
   * Shows the net balance of an account, however may or may not include unauthorized debits and credits depending on the business setup.
   * @return availableBalance
  **/
  @ApiModelProperty(value = "Shows the net balance of an account, however may or may not include unauthorized debits and credits depending on the business setup.")
  public BigDecimal getAvailableBalance() {
    return availableBalance;
  }

  public void setAvailableBalance(BigDecimal availableBalance) {
    this.availableBalance = availableBalance;
  }

  public HoldingsResponseBodyInnerProducts outstandingAmount(BigDecimal outstandingAmount) {
    this.outstandingAmount = outstandingAmount;
    return this;
  }

   /**
   * Identifies the total outstanding amount for the corresponding Liability number and Limit reference. 
   * @return outstandingAmount
  **/
  @ApiModelProperty(value = "Identifies the total outstanding amount for the corresponding Liability number and Limit reference. ")
  public BigDecimal getOutstandingAmount() {
    return outstandingAmount;
  }

  public void setOutstandingAmount(BigDecimal outstandingAmount) {
    this.outstandingAmount = outstandingAmount;
  }

  public HoldingsResponseBodyInnerProducts paidOutAmount(BigDecimal paidOutAmount) {
    this.paidOutAmount = paidOutAmount;
    return this;
  }

   /**
   * The amount paid out.
   * @return paidOutAmount
  **/
  @ApiModelProperty(value = "The amount paid out.")
  public BigDecimal getPaidOutAmount() {
    return paidOutAmount;
  }

  public void setPaidOutAmount(BigDecimal paidOutAmount) {
    this.paidOutAmount = paidOutAmount;
  }

  public HoldingsResponseBodyInnerProducts arrangementStatus(String arrangementStatus) {
    this.arrangementStatus = arrangementStatus;
    return this;
  }

   /**
   * Status of the arrangement: UNAUTH - input but not authorised yet. AUTH - authorised. AUTH-FWD (Forward) - authorised, will become active on a future date. CURRENT - the arrangement has begun full or partial disbursement. MATURED - the contract has matured and all dues have been cleared. EXPIRED - the contract has gone past its final payment date with some dues left unsettled. REVERSED - reversed. CANCELLED - cancelled (only for deposits) CLOSE - closed PENDING.CLOSURE - ready for closure
   * @return arrangementStatus
  **/
  @ApiModelProperty(value = "Status of the arrangement: UNAUTH - input but not authorised yet. AUTH - authorised. AUTH-FWD (Forward) - authorised, will become active on a future date. CURRENT - the arrangement has begun full or partial disbursement. MATURED - the contract has matured and all dues have been cleared. EXPIRED - the contract has gone past its final payment date with some dues left unsettled. REVERSED - reversed. CANCELLED - cancelled (only for deposits) CLOSE - closed PENDING.CLOSURE - ready for closure")
  public String getArrangementStatus() {
    return arrangementStatus;
  }

  public void setArrangementStatus(String arrangementStatus) {
    this.arrangementStatus = arrangementStatus;
  }

  public HoldingsResponseBodyInnerProducts totalPrincipal(BigDecimal totalPrincipal) {
    this.totalPrincipal = totalPrincipal;
    return this;
  }

   /**
   * 
   * @return totalPrincipal
  **/
  @ApiModelProperty(value = "")
  public BigDecimal getTotalPrincipal() {
    return totalPrincipal;
  }

  public void setTotalPrincipal(BigDecimal totalPrincipal) {
    this.totalPrincipal = totalPrincipal;
  }

  public HoldingsResponseBodyInnerProducts connectionId(String connectionId) {
    this.connectionId = connectionId;
    return this;
  }

   /**
   * 
   * @return connectionId
  **/
  @ApiModelProperty(value = "")
  public String getConnectionId() {
    return connectionId;
  }

  public void setConnectionId(String connectionId) {
    this.connectionId = connectionId;
  }

  public HoldingsResponseBodyInnerProducts balancesLastUpdated(String balancesLastUpdated) {
    this.balancesLastUpdated = balancesLastUpdated;
    return this;
  }

   /**
   * 
   * @return balancesLastUpdated
  **/
  @ApiModelProperty(value = "")
  public String getBalancesLastUpdated() {
    return balancesLastUpdated;
  }

  public void setBalancesLastUpdated(String balancesLastUpdated) {
    this.balancesLastUpdated = balancesLastUpdated;
  }

  public HoldingsResponseBodyInnerProducts transactionsLastUpdated(String transactionsLastUpdated) {
    this.transactionsLastUpdated = transactionsLastUpdated;
    return this;
  }

   /**
   * 
   * @return transactionsLastUpdated
  **/
  @ApiModelProperty(value = "")
  public String getTransactionsLastUpdated() {
    return transactionsLastUpdated;
  }

  public void setTransactionsLastUpdated(String transactionsLastUpdated) {
    this.transactionsLastUpdated = transactionsLastUpdated;
  }

  public HoldingsResponseBodyInnerProducts bankLogo(String bankLogo) {
    this.bankLogo = bankLogo;
    return this;
  }

   /**
   * 
   * @return bankLogo
  **/
  @ApiModelProperty(value = "")
  public String getBankLogo() {
    return bankLogo;
  }

  public void setBankLogo(String bankLogo) {
    this.bankLogo = bankLogo;
  }

  public HoldingsResponseBodyInnerProducts extSourceProvider(String extSourceProvider) {
    this.extSourceProvider = extSourceProvider;
    return this;
  }

   /**
   * 
   * @return extSourceProvider
  **/
  @ApiModelProperty(value = "")
  public String getExtSourceProvider() {
    return extSourceProvider;
  }

  public void setExtSourceProvider(String extSourceProvider) {
    this.extSourceProvider = extSourceProvider;
  }

  public HoldingsResponseBodyInnerProducts customerId(String customerId) {
    this.customerId = customerId;
    return this;
  }

   /**
   * The identifier of the customer
   * @return customerId
  **/
  @ApiModelProperty(value = "The identifier of the customer")
  public String getCustomerId() {
    return customerId;
  }

  public void setCustomerId(String customerId) {
    this.customerId = customerId;
  }

  public HoldingsResponseBodyInnerProducts connectionStatus(String connectionStatus) {
    this.connectionStatus = connectionStatus;
    return this;
  }

   /**
   * 
   * @return connectionStatus
  **/
  @ApiModelProperty(value = "")
  public String getConnectionStatus() {
    return connectionStatus;
  }

  public void setConnectionStatus(String connectionStatus) {
    this.connectionStatus = connectionStatus;
  }

  public HoldingsResponseBodyInnerProducts connectionSubStatus(String connectionSubStatus) {
    this.connectionSubStatus = connectionSubStatus;
    return this;
  }

   /**
   * 
   * @return connectionSubStatus
  **/
  @ApiModelProperty(value = "")
  public String getConnectionSubStatus() {
    return connectionSubStatus;
  }

  public void setConnectionSubStatus(String connectionSubStatus) {
    this.connectionSubStatus = connectionSubStatus;
  }

  public HoldingsResponseBodyInnerProducts nextRefreshAvailableAt(String nextRefreshAvailableAt) {
    this.nextRefreshAvailableAt = nextRefreshAvailableAt;
    return this;
  }

   /**
   * 
   * @return nextRefreshAvailableAt
  **/
  @ApiModelProperty(value = "")
  public String getNextRefreshAvailableAt() {
    return nextRefreshAvailableAt;
  }

  public void setNextRefreshAvailableAt(String nextRefreshAvailableAt) {
    this.nextRefreshAvailableAt = nextRefreshAvailableAt;
  }

  public HoldingsResponseBodyInnerProducts acctSwiftRef(String acctSwiftRef) {
    this.acctSwiftRef = acctSwiftRef;
    return this;
  }

   /**
   * 
   * @return acctSwiftRef
  **/
  @ApiModelProperty(value = "")
  public String getAcctSwiftRef() {
    return acctSwiftRef;
  }

  public void setAcctSwiftRef(String acctSwiftRef) {
    this.acctSwiftRef = acctSwiftRef;
  }

  public HoldingsResponseBodyInnerProducts extAccountNumber(String extAccountNumber) {
    this.extAccountNumber = extAccountNumber;
    return this;
  }

   /**
   * 
   * @return extAccountNumber
  **/
  @ApiModelProperty(value = "")
  public String getExtAccountNumber() {
    return extAccountNumber;
  }

  public void setExtAccountNumber(String extAccountNumber) {
    this.extAccountNumber = extAccountNumber;
  }

  public HoldingsResponseBodyInnerProducts paymentTemplates(List<HoldingsResponseBodyInnerPaymentTemplates> paymentTemplates) {
    this.paymentTemplates = paymentTemplates;
    return this;
  }

  public HoldingsResponseBodyInnerProducts addPaymentTemplatesItem(HoldingsResponseBodyInnerPaymentTemplates paymentTemplatesItem) {
    if (this.paymentTemplates == null) {
      this.paymentTemplates = new ArrayList<>();
    }
    this.paymentTemplates.add(paymentTemplatesItem);
    return this;
  }

   /**
   * Get paymentTemplates
   * @return paymentTemplates
  **/
  @ApiModelProperty(value = "")
  public List<HoldingsResponseBodyInnerPaymentTemplates> getPaymentTemplates() {
    return paymentTemplates;
  }

  public void setPaymentTemplates(List<HoldingsResponseBodyInnerPaymentTemplates> paymentTemplates) {
    this.paymentTemplates = paymentTemplates;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    HoldingsResponseBodyInnerProducts holdingsResponseBodyInnerProducts = (HoldingsResponseBodyInnerProducts) o;
    return Objects.equals(this.productLineName, holdingsResponseBodyInnerProducts.productLineName) &&
        Objects.equals(this.arrangementId, holdingsResponseBodyInnerProducts.arrangementId) &&
        Objects.equals(this.productGroupId, holdingsResponseBodyInnerProducts.productGroupId) &&
        Objects.equals(this.productGroupName, holdingsResponseBodyInnerProducts.productGroupName) &&
        Objects.equals(this.productId, holdingsResponseBodyInnerProducts.productId) &&
        Objects.equals(this.productDescription, holdingsResponseBodyInnerProducts.productDescription) &&
        Objects.equals(this.accountId, holdingsResponseBodyInnerProducts.accountId) &&
        Objects.equals(this.shortTitle, holdingsResponseBodyInnerProducts.shortTitle) &&
        Objects.equals(this.categoryId, holdingsResponseBodyInnerProducts.categoryId) &&
        Objects.equals(this.companyCode, holdingsResponseBodyInnerProducts.companyCode) &&
        Objects.equals(this.currencyId, holdingsResponseBodyInnerProducts.currencyId) &&
        Objects.equals(this.sortCode, holdingsResponseBodyInnerProducts.sortCode) &&
        Objects.equals(this.accountIBAN, holdingsResponseBodyInnerProducts.accountIBAN) &&
        Objects.equals(this.workingBalance, holdingsResponseBodyInnerProducts.workingBalance) &&
        Objects.equals(this.openingDate, holdingsResponseBodyInnerProducts.openingDate) &&
        Objects.equals(this.companyName, holdingsResponseBodyInnerProducts.companyName) &&
        Objects.equals(this.preferredProduct, holdingsResponseBodyInnerProducts.preferredProduct) &&
        Objects.equals(this.preferredProductPosition, holdingsResponseBodyInnerProducts.preferredProductPosition) &&
        Objects.equals(this.preferredProductLabel, holdingsResponseBodyInnerProducts.preferredProductLabel) &&
        Objects.equals(this.permission, holdingsResponseBodyInnerProducts.permission) &&
        Objects.equals(this.onlineActualBalance, holdingsResponseBodyInnerProducts.onlineActualBalance) &&
        Objects.equals(this.availableBalance, holdingsResponseBodyInnerProducts.availableBalance) &&
        Objects.equals(this.outstandingAmount, holdingsResponseBodyInnerProducts.outstandingAmount) &&
        Objects.equals(this.paidOutAmount, holdingsResponseBodyInnerProducts.paidOutAmount) &&
        Objects.equals(this.arrangementStatus, holdingsResponseBodyInnerProducts.arrangementStatus) &&
        Objects.equals(this.totalPrincipal, holdingsResponseBodyInnerProducts.totalPrincipal) &&
        Objects.equals(this.connectionId, holdingsResponseBodyInnerProducts.connectionId) &&
        Objects.equals(this.balancesLastUpdated, holdingsResponseBodyInnerProducts.balancesLastUpdated) &&
        Objects.equals(this.transactionsLastUpdated, holdingsResponseBodyInnerProducts.transactionsLastUpdated) &&
        Objects.equals(this.bankLogo, holdingsResponseBodyInnerProducts.bankLogo) &&
        Objects.equals(this.extSourceProvider, holdingsResponseBodyInnerProducts.extSourceProvider) &&
        Objects.equals(this.customerId, holdingsResponseBodyInnerProducts.customerId) &&
        Objects.equals(this.connectionStatus, holdingsResponseBodyInnerProducts.connectionStatus) &&
        Objects.equals(this.connectionSubStatus, holdingsResponseBodyInnerProducts.connectionSubStatus) &&
        Objects.equals(this.nextRefreshAvailableAt, holdingsResponseBodyInnerProducts.nextRefreshAvailableAt) &&
        Objects.equals(this.acctSwiftRef, holdingsResponseBodyInnerProducts.acctSwiftRef) &&
        Objects.equals(this.extAccountNumber, holdingsResponseBodyInnerProducts.extAccountNumber) &&
        Objects.equals(this.paymentTemplates, holdingsResponseBodyInnerProducts.paymentTemplates);
  }

  @Override
  public int hashCode() {
    return Objects.hash(productLineName, arrangementId, productGroupId, productGroupName, productId, productDescription, accountId, shortTitle, categoryId, companyCode, currencyId, sortCode, accountIBAN, workingBalance, openingDate, companyName, preferredProduct, preferredProductPosition, preferredProductLabel, permission, onlineActualBalance, availableBalance, outstandingAmount, paidOutAmount, arrangementStatus, totalPrincipal, connectionId, balancesLastUpdated, transactionsLastUpdated, bankLogo, extSourceProvider, customerId, connectionStatus, connectionSubStatus, nextRefreshAvailableAt, acctSwiftRef, extAccountNumber, paymentTemplates);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class HoldingsResponseBodyInnerProducts {\n");
    
    sb.append("    productLineName: ").append(toIndentedString(productLineName)).append("\n");
    sb.append("    arrangementId: ").append(toIndentedString(arrangementId)).append("\n");
    sb.append("    productGroupId: ").append(toIndentedString(productGroupId)).append("\n");
    sb.append("    productGroupName: ").append(toIndentedString(productGroupName)).append("\n");
    sb.append("    productId: ").append(toIndentedString(productId)).append("\n");
    sb.append("    productDescription: ").append(toIndentedString(productDescription)).append("\n");
    sb.append("    accountId: ").append(toIndentedString(accountId)).append("\n");
    sb.append("    shortTitle: ").append(toIndentedString(shortTitle)).append("\n");
    sb.append("    categoryId: ").append(toIndentedString(categoryId)).append("\n");
    sb.append("    companyCode: ").append(toIndentedString(companyCode)).append("\n");
    sb.append("    currencyId: ").append(toIndentedString(currencyId)).append("\n");
    sb.append("    sortCode: ").append(toIndentedString(sortCode)).append("\n");
    sb.append("    accountIBAN: ").append(toIndentedString(accountIBAN)).append("\n");
    sb.append("    workingBalance: ").append(toIndentedString(workingBalance)).append("\n");
    sb.append("    openingDate: ").append(toIndentedString(openingDate)).append("\n");
    sb.append("    companyName: ").append(toIndentedString(companyName)).append("\n");
    sb.append("    preferredProduct: ").append(toIndentedString(preferredProduct)).append("\n");
    sb.append("    preferredProductPosition: ").append(toIndentedString(preferredProductPosition)).append("\n");
    sb.append("    preferredProductLabel: ").append(toIndentedString(preferredProductLabel)).append("\n");
    sb.append("    permission: ").append(toIndentedString(permission)).append("\n");
    sb.append("    onlineActualBalance: ").append(toIndentedString(onlineActualBalance)).append("\n");
    sb.append("    availableBalance: ").append(toIndentedString(availableBalance)).append("\n");
    sb.append("    outstandingAmount: ").append(toIndentedString(outstandingAmount)).append("\n");
    sb.append("    paidOutAmount: ").append(toIndentedString(paidOutAmount)).append("\n");
    sb.append("    arrangementStatus: ").append(toIndentedString(arrangementStatus)).append("\n");
    sb.append("    totalPrincipal: ").append(toIndentedString(totalPrincipal)).append("\n");
    sb.append("    connectionId: ").append(toIndentedString(connectionId)).append("\n");
    sb.append("    balancesLastUpdated: ").append(toIndentedString(balancesLastUpdated)).append("\n");
    sb.append("    transactionsLastUpdated: ").append(toIndentedString(transactionsLastUpdated)).append("\n");
    sb.append("    bankLogo: ").append(toIndentedString(bankLogo)).append("\n");
    sb.append("    extSourceProvider: ").append(toIndentedString(extSourceProvider)).append("\n");
    sb.append("    customerId: ").append(toIndentedString(customerId)).append("\n");
    sb.append("    connectionStatus: ").append(toIndentedString(connectionStatus)).append("\n");
    sb.append("    connectionSubStatus: ").append(toIndentedString(connectionSubStatus)).append("\n");
    sb.append("    nextRefreshAvailableAt: ").append(toIndentedString(nextRefreshAvailableAt)).append("\n");
    sb.append("    acctSwiftRef: ").append(toIndentedString(acctSwiftRef)).append("\n");
    sb.append("    extAccountNumber: ").append(toIndentedString(extAccountNumber)).append("\n");
    sb.append("    paymentTemplates: ").append(toIndentedString(paymentTemplates)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

