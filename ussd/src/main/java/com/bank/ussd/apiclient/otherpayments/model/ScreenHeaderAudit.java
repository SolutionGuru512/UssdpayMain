/*
 * TC CHANNELS OTHER AC FT PUBLISHED API
 * TC CHANNELS OTHER AC FT PUBLISHED API
 *
 * OpenAPI spec version: v1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.bank.ussd.apiclient.otherpayments.model;

import java.util.Objects;
import com.fasterxml.jackson.annotation.JsonProperty;
import io.swagger.annotations.ApiModelProperty;
import java.math.BigDecimal;

/**
 * ScreenHeaderAudit
 */

public class ScreenHeaderAudit {
  @JsonProperty("T24_time")
  private Integer t24Time = null;

  @JsonProperty("versionNumber")
  private String versionNumber = null;

  @JsonProperty("requestParse_time")
  private BigDecimal requestParseTime = null;

  @JsonProperty("responseParse_time")
  private BigDecimal responseParseTime = null;

  public ScreenHeaderAudit t24Time(Integer t24Time) {
    this.t24Time = t24Time;
    return this;
  }

   /**
   * Time taken to response by T24
   * @return t24Time
  **/
  @ApiModelProperty(value = "Time taken to response by T24")
  public Integer getT24Time() {
    return t24Time;
  }

  public void setT24Time(Integer t24Time) {
    this.t24Time = t24Time;
  }

  public ScreenHeaderAudit versionNumber(String versionNumber) {
    this.versionNumber = versionNumber;
    return this;
  }

   /**
   * The CURR.NO. of the record
   * @return versionNumber
  **/
  @ApiModelProperty(value = "The CURR.NO. of the record")
  public String getVersionNumber() {
    return versionNumber;
  }

  public void setVersionNumber(String versionNumber) {
    this.versionNumber = versionNumber;
  }

  public ScreenHeaderAudit requestParseTime(BigDecimal requestParseTime) {
    this.requestParseTime = requestParseTime;
    return this;
  }

   /**
   * Time taken to parse the request by IRIS
   * @return requestParseTime
  **/
  @ApiModelProperty(value = "Time taken to parse the request by IRIS")
  public BigDecimal getRequestParseTime() {
    return requestParseTime;
  }

  public void setRequestParseTime(BigDecimal requestParseTime) {
    this.requestParseTime = requestParseTime;
  }

  public ScreenHeaderAudit responseParseTime(BigDecimal responseParseTime) {
    this.responseParseTime = responseParseTime;
    return this;
  }

   /**
   * Time taken to parse the response by IRIS
   * @return responseParseTime
  **/
  @ApiModelProperty(value = "Time taken to parse the response by IRIS")
  public BigDecimal getResponseParseTime() {
    return responseParseTime;
  }

  public void setResponseParseTime(BigDecimal responseParseTime) {
    this.responseParseTime = responseParseTime;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ScreenHeaderAudit screenHeaderAudit = (ScreenHeaderAudit) o;
    return Objects.equals(this.t24Time, screenHeaderAudit.t24Time) &&
        Objects.equals(this.versionNumber, screenHeaderAudit.versionNumber) &&
        Objects.equals(this.requestParseTime, screenHeaderAudit.requestParseTime) &&
        Objects.equals(this.responseParseTime, screenHeaderAudit.responseParseTime);
  }

  @Override
  public int hashCode() {
    return Objects.hash(t24Time, versionNumber, requestParseTime, responseParseTime);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ScreenHeaderAudit {\n");
    
    sb.append("    t24Time: ").append(toIndentedString(t24Time)).append("\n");
    sb.append("    versionNumber: ").append(toIndentedString(versionNumber)).append("\n");
    sb.append("    requestParseTime: ").append(toIndentedString(requestParseTime)).append("\n");
    sb.append("    responseParseTime: ").append(toIndentedString(responseParseTime)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

